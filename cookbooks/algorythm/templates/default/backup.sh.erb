#!/bin/bash
##################################################
# Usage: backup [OPTIONS] {list|dump|restore [DATE]}    #
# Options:                                       #
#   -h --help    Usage                           #
#   -f --force   Force backup overwrite          #
# DATE: YY-MM-DD                                 #
# Must be run as root                            #
##################################################

if [ $(id -u) != '0' ]; then
	echo 'You need root privileges to run this script' >&2
	exit 1
fi

if [ -z "$BACKUP_DIR" ]; then
	BACKUP_DIR='<%=@backupDir%>'
fi

SCRIPT_NAME="$0"
ACTION=
BACKUP_DATE=
FORCE_OVERWRITE=
INSTALL_DIR=$(dirname $(readlink -f "$SCRIPT_NAME"))
DATE_FORMAT='[\d]{2}-[\d]{2}-[\d]{2}'
MAX_BACKUPS=5
MAX_LOGS=5
EXIT_CODE=0

function showUsageAndExit {
	EXIT_STATUS=$1
	
	if [ -z $EXIT_STATUS ]; then
		EXIT_STATUS=1
	fi

	printf "Usage: backup {list|dump [force]|restore DATE}\nDATE: YY-MM-DD\n"
	exit $EXIT_STATUS
}

function toBackupTaskId {
	BAK_TYPE=$1
	echo "$BACKUP_DATE-$BAK_TYPE"
}

function printStatusMessage {
	MSG="$1"
	STATE="$2"
	SPACER="                                                          "
	printf "%s%s%20s\n" "$MSG" "${SPACER:${#MSG}}" "$STATE"
}

function indent {
	if [ -z "$1" ]; then
		return
	fi
	i=1
	if [ "$1" -ge 0 &> /dev/null ]; then
		i=$1
		shift
	fi
	i=$(($i * 2))
	("$@") 2>&1 | while read -r LINE; do
		printf "%${i}s$LINE\n"
	done
	CMD_EXIT_CODE=$PIPESTATUS
	return $CMD_EXIT_CODE
}

function list {
	BYTE_COUNT=0
	for FILE in $(ls "$BACKUP_DIR"); do
		BYTE_COUNT=$(expr $BYTE_COUNT + $(stat -c %s "$BACKUP_DIR/$FILE"))
	done
        K_BYTE_COUNT=$(expr $BYTE_COUNT / 1024)
        M_BYTE_COUNT=$(expr $K_BYTE_COUNT / 1024)
        M_BYTE_COUNT=$(expr $M_BYTE_COUNT + 1)
        printStatusMessage "# Total size:" "~${M_BYTE_COUNT}M"
	ls "$BACKUP_DIR" | grep -Po "$DATE_FORMAT" | sort -r | uniq | while read -r ARCHIVE_DATE; do
		echo "$ARCHIVE_DATE"
		for ARCHIVE in $(ls "$BACKUP_DIR" | grep -P "^$ARCHIVE_DATE-.*\.tar\.bz2$"); do
			ARCHIVE_SIZE=$(ls -lah "$BACKUP_DIR/$ARCHIVE" | awk '{print $5}')
			BACKUP_TYPE=${ARCHIVE%.tar.bz2}
			BACKUP_TYPE=${BACKUP_TYPE#${ARCHIVE_DATE}-}
			printStatusMessage "* $BACKUP_TYPE" "$ARCHIVE_SIZE"
		done
	done
}

function cleanDirectory {
	CLEAN_DIR="$1"
	MAX_COUNT=$2
	cd "$CLEAN_DIR"
	ls | grep -Po '^[\d]{2}-[\d]{2}-[\d]{2}' | sort | uniq | head -n "-$MAX_COUNT" | while read -r ARCHIVE_DATE; do
		echo "  * remove $ARCHIVE_DATE"
		ls | grep -P "^$ARCHIVE_DATE" | xargs rm
	done
}

function runBackupTask {
	BACKUP_TYPE="$1"
	BACKUP_TASK_ID=$(toBackupTaskId $BACKUP_TYPE)
	BACKUP_ARCHIVE="$BACKUP_DIR/$BACKUP_TASK_ID.tar.bz2"
	BACKUP_TMP_DIR="$TMP_DIR/$BACKUP_TASK_ID"

	if [ $ACTION = 'dump' ]; then
		if [ -f "$BACKUP_ARCHIVE" ]; then
			printf "WARNING: $BACKUP_ARCHIVE\n         already exists and will be overwritten\n"
		fi

		mkdir $BACKUP_TMP_DIR
	else
		if [ ! -f "$BACKUP_ARCHIVE" ]; then
			echo "failed: $BACKUP_ARCHIVE does not exist"
			return 1
		fi

		echo '* Decompress backup'
		cd $TMP_DIR
		indent tar xvjf "$BACKUP_ARCHIVE"
		DECOMPRESSION_EXIT_CODE=$?

		if [ $DECOMPRESSION_EXIT_CODE -ne 0 ]; then
			echo "failed: Couldn't extract $BACKUP_ARCHIVE in $TMP_DIR"
			return 1
		fi
	fi

	(source "$INSTALL_DIR/tasks/$BACKUP_TYPE")
	TASK_EXIT_CODE=$?

	if [ $TASK_EXIT_CODE -eq 0 ]; then
		if [ $ACTION = 'dump' ]; then
			echo '* Compress backup'
			cd $TMP_DIR
			indent tar cvjf "$TMP_ARCHIVE_DIR/$BACKUP_TASK_ID.tar.bz2" $BACKUP_TASK_ID
			COMPRESSION_EXIT_CODE=$PIPESTATUS

			if [ $COMPRESSION_EXIT_CODE != '0' ]; then
				echo "failed: Couldn't compress and save backup to $BACKUP_ARCHIVE"
				return 1
			fi
		fi

		echo 'done'
		return 0
	else
		echo 'failed'
		return 1
	fi
}

function runBackup {
	LOG_DIR="$INSTALL_DIR/log"
	LOG_FILE="$LOG_DIR/$ACTION-$BACKUP_DATE.log"
	TMP_DIR="/tmp/backup-$BACKUP_DATE"
	TMP_ARCHIVE_DIR="$TMP_DIR/backups"
	FINISH_LISTENER_FILE="$TMP_DIR/finish.sh"
	
	if [ -z "$BACKUP_TYPES" ]; then
		BACKUP_TYPES=$(ls "$INSTALL_DIR/tasks" | grep -P '^[\w-_]+$')
	fi

	if [ -d "$TMP_DIR" ]; then
		echo "ERROR: Temp directory $TMP_DIR is in use" >&2
		exit 4
	fi

	source "$INSTALL_DIR/backup-utils.inc.sh"

	mkdir -p "$BACKUP_DIR"
	mkdir -p $TMP_ARCHIVE_DIR
	printf '' > "$FINISH_LISTENER_FILE"

	# Run backup tasks parallel
	for BACKUP_TYPE in $BACKUP_TYPES; do
		BACKUP_TASK_ID=$(toBackupTaskId $BACKUP_TYPE)
		PARTIAL_LOG_FILE="$LOG_DIR/$BACKUP_TASK_ID.log"
		echo "* $BACKUP_TYPE"
		printf '' > $PARTIAL_LOG_FILE

		runBackupTask "$BACKUP_TYPE" &>> "$PARTIAL_LOG_FILE" &
		declare "${BACKUP_TYPE}_PID=$!"
	done

	echo ''

	# Wait for tasks to terminate and collect exit codes
	for BACKUP_TYPE in $BACKUP_TYPES; do
		PID_VAR="${BACKUP_TYPE}_PID"
		wait ${!PID_VAR}
		TASK_EXIT_CODE=$?

		if [ $TASK_EXIT_CODE -ne 0 ]; then
			echo "! $BACKUP_TYPE failed"
		        EXIT_CODE=3
		fi
	done

	# Concat task logs and write to single $LOG_FILE
	printf '' > $LOG_FILE
	for BACKUP_TYPE in $BACKUP_TYPES; do
		BACKUP_TASK_ID=$(toBackupTaskId $BACKUP_TYPE)
		PARTIAL_LOG_FILE="$LOG_DIR/$BACKUP_TASK_ID.log"
		echo '===============================================================================' >> "$LOG_FILE"
		echo "  $ACTION_LABEL $BACKUP_TYPE $BACKUP_DATE" >> "$LOG_FILE"
		echo '===============================================================================' >> "$LOG_FILE"
		cat "$PARTIAL_LOG_FILE" >> "$LOG_FILE"
		rm -rf "$PARTIAL_LOG_FILE"
	done

	echo '===============================================================================' >> "$LOG_FILE"

	if [ $EXIT_CODE -eq 0 ] && [ $ACTION = 'dump' ]; then
		# Move compressed backups to $BACKUP_DIR
		echo "* Move compressed backups to $BACKUP_DIR" >> "$LOG_FILE"

		for ARCHIVE in $(ls "$TMP_ARCHIVE_DIR"); do
			echo "  * $ARCHIVE" >> "$LOG_FILE"
			mv "$TMP_ARCHIVE_DIR/$ARCHIVE" "$BACKUP_DIR/$ARCHIVE" &>> "$LOG_FILE" &&
			chmod 600 "$BACKUP_DIR/$ARCHIVE" &>> "$LOG_FILE"
			ARCHIVE_MV_EXIT_CODE=$?

			if [ $ARCHIVE_MV_EXIT_CODE -ne 0 ]; then
				EXIT_CODE=6
			fi
		done

		echo '* Remove old backups' >> "$LOG_FILE"
		cleanDirectory "$BACKUP_DIR" $MAX_BACKUPS &>> "$LOG_FILE"
		echo '* Remove old logs' >> "$LOG_FILE"
		cleanDirectory "$LOG_DIR" $MAX_LOGS &>> "$LOG_FILE"
	fi

	# Run finish listeners
	LISTENER_RESULT=$(cat "$FINISH_LISTENER_FILE" | sort | uniq | while read -r FINISH_LISTENER; do
		(eval $FINISH_LISTENER) &>> "$LOG_FILE"

		STATUS=$?;

		if [ $STATUS -ne 0 ]; then
			echo 'failed' >> "$LOG_FILE"
			echo 'failed'
		fi
	done)

	echo $LISTENER_RESULT | grep 'failed' > /dev/null
	STATUS=$?

	if [ $STATUS -eq 0 ]; then
		EXIT_CODE=7
	fi

	# Print final status message
	if [ $EXIT_CODE -eq 0 ]; then
		echo "Finished successfully" >> "$LOG_FILE"
		echo "Finished successfully (see $LOG_FILE)"
	else
		echo "Finished with error(s)" >> "$LOG_FILE"
		printf "\nFinished with error(s) (see $LOG_FILE)\n"
	fi

	rm -rf $TMP_DIR
}


# Read parameters
BACKUP_TYPES=''
DUMP_OR_RESTORE=false
while [ "$1" != '' ]; do
	case "$1" in
		restore)
			ACTION=$1
			shift
			BACKUP_DATE="$1"
			DUMP_OR_RESTORE=true
		;;
		dump)
			ACTION=$1
			DUMP_OR_RESTORE=true
		;;
		list) ACTION=$1;;
		-f|--force) FORCE_OVERWRITE=1;;
		-h|--help)  showUsageAndExit 0;;
		*)
			if $DUMP_OR_RESTORE; then
				if [ ! -f "$INSTALL_DIR/tasks/$1" ]; then
					echo "ERROR: Unknown backup type: $1" >&2
					exit 1
				fi
				BACKUP_TYPES="$BACKUP_TYPES$1 "
			else
				ifshowUsageAndExit
			fi
	esac
	shift
done

if [ -z "$ACTION" ]; then
	showUsageAndExit
fi

# Apply action
case "$ACTION" in
	dump)
		ACTION_LABEL='Backup'
		BACKUP_DATE=$(date +'%y-%m-%d')

		if [ -d $BACKUP_DIR ]; then
			ls $BACKUP_DIR | grep -P $BACKUP_DATE'\.tar\.bz2$' > /dev/null
			BACKUP_DATE_SEARCH_EXIT_CODE=$?

			if [ $BACKUP_DATE_SEARCH_EXIT_CODE -eq 0 ]; then
				if [ "$FORCE_OVERWRITE" = '1' ]; then
					echo "WARNING: Backup date $BACKUP_DATE already exists and will be overwritten"
				else
					printf "ERROR: Backup date $BACKUP_DATE already exists. \n       Add -f option to overwrite old backups\n" >&2
					exit 5
				fi
			fi
		fi

		echo "Backup date $BACKUP_DATE:"

		runBackup
	;;
	restore)
		ACTION_LABEL='Restore'
		if [ -z "$BACKUP_DATE" ]; then
			showUsageAndExit
		fi
		if [ -z $(echo "$BACKUP_DATE" | grep -P "^$DATE_FORMAT$") ]; then
			echo "ERROR: Invalid date format. Given: $BACKUP_DATE. Expecting: YY-MM-DD" >&2
			exit 1
		fi

		echo "$ACTION_LABEL"

		runBackup
	;;
	list)
		list
	;;
	*)
		showUsageAndExit
	;;
esac

exit $EXIT_CODE
