#!/bin/bash
#####################################
# Usage: backup {dump|restore DATE} #
# Must be run as root               #
#####################################

if [ $(id -u) != '0' ]; then
	echo 'You need root privileges to run this script' 2>&1
	exit 1
fi

if [ -z "$BACKUP_DIR" ]; then
	BACKUP_DIR='<%=@backupDir%>'
fi

SCRIPT_NAME="$0"
ACTION="$1"

function showUsageAndExit {
	echo "Usage: $SCRIPT_NAME {dump|restore ID}"
	exit 2
}

case "$ACTION" in
	dump)
		BACKUP_DATE=$(date +'%y-%m-%d_%H-%M')

		ls $BACKUP_DIR | grep -P $BACKUP_DATE'\.tar\.bz2$' >> /dev/null
		BACKUP_DATE_SEARCH_EXIT_CODE=$?

		if [ $BACKUP_DATE_SEARCH_EXIT_CODE = '0' ]; then
			echo "Backup date $BACKUP_DATE already exists" 2>&1
			exit 5
		fi
	;;
	restore)
		BACKUP_DATE="$2"

		if [ -z "$BACKUP_DATE" ]; then
			showUsageAndExit
		fi
	;;
	*)
		showUsageAndExit
	;;
esac

INSTALL_DIR=$(dirname $(readlink -f "$SCRIPT_NAME"))
LOG_DIR="$INSTALL_DIR/log"
PATH="$PATH:$INSTALL_DIR/bin"
LOG_FILE="$LOG_DIR/$ACTION-$BACKUP_DATE.log"
TMP_DIR="/tmp/backup-$BACKUP_DATE"
TMP_ARCHIVE_DIR="$TMP_DIR/backups"
BACKUP_EXIT_CODE=0

if [ -d "$TMP_DIR" ]; then
	echo "Temp directory $TMP_DIR is in use" 2>&1
	exit 4
fi

LOG_FILE_NAME_INC=0
TMP_LOG_FILE_NAME=$LOG_FILE
while [ -f "$TMP_LOG_FILE_NAME" ]; do
	LOG_FILE_NAME_INC=$(expr $LOG_FILE_NAME_INC + 1)
	TMP_LOG_FILE_NAME="$LOG_DIR/$ACTION-$BACKUP_DATE.$LOG_FILE_NAME_INC.log"
done
LOG_FILE=$TMP_LOG_FILE_NAME

function toBackupType {
	SCRIPT_FILE=$1
	BACKUP_TYPE=${SCRIPT_FILE%.sh}
	echo ${BACKUP_TYPE#backup-}
}

function toBackupTaskId {
	SCRIPT_FILE=$1
	BACKUP_TYPE=$(toBackupType $SCRIPT_FILE)
	echo "$BACKUP_TYPE-$BACKUP_DATE"
}

function runBackupTask {
	SCRIPT_FILE="$1"
	BACKUP_TYPE=$(toBackupType $SCRIPT_FILE)
	BACKUP_TASK_ID=$(toBackupTaskId $SCRIPT_FILE)
	
	BACKUP_ARCHIVE="$BACKUP_DIR/$BACKUP_TASK_ID.tar.bz2"
	CUR_TMP_DIR="$TMP_DIR/$BACKUP_TASK_ID"

	if [ $ACTION = 'dump' ]; then
		if [ -f "$BACKUP_ARCHIVE" ]; then
			echo "failed: $BACKUP_ARCHIVE already exists"
			return 1
		fi

		mkdir $CUR_TMP_DIR
		chmod 777 $CUR_TMP_DIR
	else
		if [ ! -f "$BACKUP_ARCHIVE" ]; then
			echo "failed: $BACKUP_ARCHIVE does not exist"
			return 1
		fi

		echo '* decompress backup'
		cd $TMP_DIR
		tar xvjf "$BACKUP_ARCHIVE"
		DECOMPRESSION_EXIT_CODE=$?

		if [ $DECOMPRESSION_EXIT_CODE != '0' ]; then
			echo "failed: Couldn't extract $BACKUP_ARCHIVE in $TMP_DIR"
			return 1
		fi
	fi

	sh "$INSTALL_DIR/tasks/$SCRIPT_FILE" $ACTION $CUR_TMP_DIR
	STATUS=$?

	if [ $STATUS = '0' ]; then
		if [ $ACTION = 'dump' ]; then
			echo '* compress backup'
			cd $TMP_DIR
			tar cvjf "$TMP_ARCHIVE_DIR/$BACKUP_TASK_ID.tar.bz2" $BACKUP_TASK_ID
			COMPRESSION_EXIT_CODE=$?

			if [ $COMPRESSION_EXIT_CODE = '0' ]; then
				chmod 600 $BACKUP_ARCHIVE
			else
				echo "failed: Couldn't compress and save backup to $BACKUP_ARCHIVE"
				return 1
			fi
		fi

		echo 'done'
		return 0
	else
		echo 'failed'
		return 1
	fi
}

function runBackup {
	echo "$ACTION date $BACKUP_DATE (in $BACKUP_DIR):"
	mkdir -p $BACKUP_DIR
	mkdir -p $TMP_ARCHIVE_DIR

	# Run backup tasks parallel
	for SCRIPT_FILE in $(ls "$INSTALL_DIR/tasks" | grep -P '\.sh'); do
		BACKUP_TYPE=$(toBackupType $SCRIPT_FILE)
		BACKUP_TASK_ID=$(toBackupTaskId $SCRIPT_FILE)
		PARTIAL_LOG_FILE="$LOG_DIR/$BACKUP_TASK_ID.log"
		echo "  * $BACKUP_TYPE"
		printf '' > $PARTIAL_LOG_FILE

		runBackupTask "$SCRIPT_FILE" &>> "$PARTIAL_LOG_FILE" &
		declare "${BACKUP_TYPE}_PID=$!"

		rm -rf $TMP_DIR/$BACKUP_TASK_ID
	done

	# Wait for tasks to terminate and collect exit codes
	for SCRIPT_FILE in $(ls "$INSTALL_DIR/tasks" | grep -P '\.sh'); do
		PID_VAR=$(toBackupType $SCRIPT_FILE)'_PID'
		wait ${!PID_VAR}
		TASK_EXIT_CODE=$?

		if [ $TASK_EXIT_CODE != '0' ]; then
		        BACKUP_EXIT_CODE=3
		fi
	done

	# Concat task logs and write to single $LOG_FILE
	printf '' > $LOG_FILE
	for SCRIPT_FILE in $(ls "$INSTALL_DIR/tasks" | grep -P '\.sh'); do
		BACKUP_TYPE=$(toBackupType $SCRIPT_FILE)
		BACKUP_TASK_ID=$(toBackupTaskId $SCRIPT_FILE)
		PARTIAL_LOG_FILE="$LOG_DIR/$BACKUP_TASK_ID.log"
		echo '===============================================================================' >> "$LOG_FILE"
		echo "  $ACTION $BACKUP_TYPE" >> "$LOG_FILE"
		echo '===============================================================================' >> "$LOG_FILE"
		cat "$PARTIAL_LOG_FILE" >> "$LOG_FILE"
		rm -rf "$PARTIAL_LOG_FILE"
	done

	if [ $BACKUP_EXIT_CODE = '0' ]; then
		if [ $ACTION = 'dump' ]; then
			printf "\ncopy compressed backups to $BACKUP_DIR ...\n" >> "$LOG_FILE"

			for ARCHIVE in $(ls "$TMP_ARCHIVE_DIR"); do
				mv "$TMP_ARCHIVE_DIR/$ARCHIVE" "$BACKUP_DIR/$ARCHIVE"
			done
		fi

		echo "finished successfully" >> "$LOG_FILE"
		printf "\nfinished successfully (see $LOG_FILE)\n"
		
		if [ $ACTION = 'dump' ]; then
			echo "Run 'backup restore $BACKUP_DATE' to restore this backup"
		fi
	else
		echo "finished with error(s)" >> "$LOG_FILE"
		printf "\nfinished with error(s) (see $LOG_FILE)\n"
	fi

	rm -rf $TMP_DIR
}

runBackup
exit $BACKUP_EXIT_CODE
