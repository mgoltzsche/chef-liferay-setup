#!/bin/bash
###################################
# Usage: backup {dump|restore DATE} #
# Must be run as root             #
###################################

if [ $(id -u) != '0' ]; then
	echo 'You need root privileges to run this script' 2>&1
	exit 1
fi

if [ -z "$BACKUP_DIR" ]; then
	BACKUP_DIR='<%=@backupDir%>'
fi

SCRIPT_NAME="$0"
ACTION="$1"

function showUsageAndExit {
	echo "Usage: $SCRIPT_NAME {dump|restore ID}"
	exit 2
}

case "$ACTION" in
	dump)
		ACTION_LABEL="Backing up"
		BACKUP_DATE=$(date +'%y-%m-%d_%H-%M')
	;;
	restore)
		if [[ -z "$2" ]]; then
			showUsageAndExit
		fi

		ACTION_LABEL="Restoring"
		BACKUP_DATE="$2"
	;;
	*)
		showUsageAndExit
	;;
esac

TIMESTAMP=$(date +%s)
BACKUP_INSTALL_DIR=$(dirname $(readlink -f "$0"))
LOG_DIR="$BACKUP_INSTALL_DIR/log"
PATH="$PATH:$BACKUP_INSTALL_DIR/bin"
TMP_DIR="/tmp/backup-$BACKUP_DATE"
SCRIPT_ERROR=false

function runBackupTask {
	SCRIPT_FILE="$1"
	TASK_NAME="$2"

	echo "* $ACTION_LABEL $TASK_NAME ..."

	BACKUP_ID="$TASK_NAME-$BACKUP_DATE"
	BACKUP_ARCHIVE="$BACKUP_DIR/$BACKUP_ID.tar.bz2"
	CUR_TMP_DIR="$TMP_DIR/$BACKUP_ID"

	if [ $ACTION = 'dump' ]; then
		if [ -f $BACKUP_ARCHIVE ]; then
			echo "  ... failed: $BACKUP_ARCHIVE already exists" 2>&1
			SCRIPT_ERROR=true
			return 1
		fi

		mkdir $CUR_TMP_DIR
		chmod 777 $CUR_TMP_DIR
	else
		if [ ! -f $BACKUP_ARCHIVE ]; then
			echo "  ... failed: $BACKUP_ARCHIVE does not exist" 2>&1
			SCRIPT_ERROR=true
			return 1
		fi

		cd $TMP_DIR
		tar xjf $BACKUP_ARCHIVE
		STATUS=$?

		if [ $STATUS != '0' ]; then
			echo "  ... failed: Couldn't extract $BACKUP_ARCHIVE in $TMP_DIR" 2>&1
			SCRIPT_ERROR=true
			return 1
		fi
	fi

	sh "$BACKUP_INSTALL_DIR/tasks/$SCRIPT_FILE" $ACTION $CUR_TMP_DIR
	STATUS=$?

	if [ $STATUS = '0' ]; then
		if [ $ACTION = 'dump' ]; then
			cd $TMP_DIR
			tar cjf $BACKUP_ARCHIVE $BACKUP_ID
			STATUS=$?

			if [ $STATUS = '0' ]; then
				chmod 600 $BACKUP_ARCHIVE
			else
				echo "  ... failed: Couldn't compress and save backup to $BACKUP_ARCHIVE" 2>&1
				SCRIPT_ERROR=true
				return 1
			fi
		fi

		echo "  ... finished"
		return 0
	else
		echo "  ... $scriptName $ACTION failed" 2>&1
		SCRIPT_ERROR=true
		return 1
	fi
}

echo "$ACTION_LABEL $BACKUP_DIR/*/$BACKUP_ID"

mkdir -p $BACKUP_DIR
mkdir $TMP_DIR

for SCRIPT_FILE in $(ls "$BACKUP_INSTALL_DIR/tasks" | grep -P "\.sh"); do
	TASK_NAME=${SCRIPT_FILE#backup-}
	TASK_NAME=${TASK_NAME%.sh}
	LOG_NAME=
	runBackupTask "$SCRIPT_FILE" "$TASK_NAME" >>  &
	rm -rf $TMP_DIR/$BACKUP_ID
done
wait

rm -rf $TMP_DIR

if $SCRIPT_ERROR; then
	echo "Finished with error(s)"
	exit 3
else
	echo "Finished successfully"
fi
