#!/bin/bash
#######################################################################################
# source this file to use the contained functions:                                    #
#   printTaskMsg    MESSAGE PATH                                                      #
#   backupPostgreDB {dump DATABASE FILE|restore DATABASE FILE OWNER}                  #
#   backupFile      {dump FILE BAK|restore FILE BAK [OWNER[, PERMISSIONS]]}           #
#   backupDirectory {dump DIRECTORY BAK|restore DIRECTORY BAK [OWNER[, PERMISSIONS]]} #
#   serviceWrapper  {stop|start|restart} SERVICE                                      #
# Must be run as root                                                                 #
#######################################################################################

function printTaskMsg {
	MSG="$1"
	DETAIL="$2"
	SPACER_SMALL="                      "
	SPACER_BIG="                                                      "
	echo "* $MSG${SPACER_SMALL:${#MSG}}$DETAIL${SPACER_BIG:${#DETAIL}}"
}

function backupPostgreDB {
	FN_NAME='backupPostgresDB'
	DATABASE="$1"
	SQL_FILE="$BACKUP_TMP_DIR/$2"
	DB_OWNER="$3"

	if [ "$ACTION" != 'dump' ] && [ "$ACTION" != 'restore' ] || [ -z "$DATABASE" ] || [ -z "$SQL_FILE" ]; then
		echo "Usage: $FN_NAME {dump DATABASE FILE|restore DATABASE FILE OWNER}"
		return 1
	fi

	printTaskMsg "$ACTION postgres db" "$DATABASE"

	case "$ACTION" in
		dump)
			BAK_DIR=$(dirname "$SQL_FILE")
			mkdir -p "$BAK_DIR" &&
			chown root:postgres "$BAK_DIR" &&
			chmod 770 "$BAK_DIR" &&
			su postgres -c "pg_dump \"$DATABASE\" > \"$SQL_FILE\""
		;;
		restore)
			if [ -z "$DB_OWNER" ]; then
				echo "Usage: $FN restore DATABASE FILE OWNER"
				return 1
			fi

			su postgres -c "dropdb \"$DATABASE\"" >> /dev/null
			su postgres -c "createdb \"$DATABASE\" -O \"$DB_OWNER\"" &&
			su postgres -c "psql -1 \"$DATABASE\" < \"$SQL_FILE\""
		;;
	esac
}

function backupFile {
	FN_NAME='backupFile'
	FILE="$1"
	FILE_BAK="$BACKUP_TMP_DIR/$2"
	OWNER="$3"

	if [ -z "$OWNER" ]; then
		OWNER='root'
	fi

	if [ "$ACTION" != 'dump' ] && [ "$ACTION" != 'restore' ] || [ -z "$FILE" ] || [ -z "$FILE_BAK" ]; then
		echo "Usage: $FN_NAME {dump FILE BAK|restore FILE BAK [OWNER]}"
		return 1
	fi

	printTaskMsg 'file' "$FILE"

	case "$ACTION" in
		dump)
			mkdir -p $(dirname "$FILE_BAK") &&
			cp "$FILE" "$FILE_BAK"
		;;
		restore)
			if [ -z "$OWNER" ]; then
				echo "Usage: $FN_NAME restore FILE BAK [OWNER]"
				return 1
			fi
		
			rm -f "$FILE" &&
			cp "$FILE_BAK" "$FILE" &&
			chown -R "$OWNER" "$FILE"
		;;
	esac
}

function backupDirectory {
	FN_NAME='backupDirectory'
	DIRECTORY="$1"
	DIRECTORY_BAK="$BACKUP_TMP_DIR/$2"
	OWNER="$3"

	if [ -z "$OWNER" ]; then
		OWNER='root'
	fi

	if [ "$ACTION" != 'dump' ] && [ "$ACTION" != 'restore' ] || [ -z "$DIRECTORY" ] || [ -z "$DIRECTORY_BAK" ]; then
		echo "Usage: $FN_NAME {dump DIRECTORY BAK|restore DIRECTORY BAK [OWNER]}"
		return 1
	fi

	printTaskMsg 'directory' "$DIRECTORY"

	case "$ACTION" in
		dump)
			mkdir -p $(dirname "$DIRECTORY_BAK") &&
			cp -r "$DIRECTORY" "$DIRECTORY_BAK"
			CP_STATUS=$?

			if [ $CP_STATUS != '0' ]; then
				return 1
			fi

			while [ "$3" != '-i' ] && [ "$3" != '' ]; do
				shift
			done
			if [ "$3" == '-i' ]; then
				printf '  * ignore sub directories:'
				while [ "$4" != '' ]; do
					printf " $4"
					rm -rf "$DIRECTORY_BAK/$4"
					RM_STATUS=$?

					if [ $RM_STATUS != '0' ]; then
						return 1
					fi

					shift
				done
				echo ''
			fi
		;;
		restore)
			if [ -z "$OWNER" ]; then
				echo "Usage: $FN_NAME restore DIRECTORY BAK [OWNER]"
				return 1
			fi
		
			rm -rf "$DIRECTORY" &&
			cp -r "$DIRECTORY_BAK" "$DIRECTORY" &&
			chown -R "$OWNER" "$DIRECTORY"
		;;
	esac
}

function serviceWrapper {
	FN_NAME='serviceWrapper'
	SERVICE=$1
	ACTION=$2

	if [ -z "$SERVICE" ]; then
		echo "Usage: $FN_NAME {stop|start|restart} SERVICE" 2>&1
		return 1
	fi

	case "$ACTION" in
		stop)
			echo "* stop $SERVICE"
			service "$SERVICE" stop &>> /dev/null
		;;
		start|restart)
			echo "echo '* restart $SERVICE'; service '$SERVICE' restart &>> /dev/null" >> "$FINISH_LISTENER_FILE"
		;;
		*)
			echo "Usage: $FN_NAME {stop|start|restart} SERVICE" 2>&1
			return 1
		;;
	esac
}
