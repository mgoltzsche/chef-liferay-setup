#!/bin/bash
####################################################
# source this file to use the contained functions: #
#   printTaskMsg    MESSAGE PATH                   #
#   backupPostgreDB DATABASE OWNER                 #
#   backupFile      FILE BAK [OWNER]}              #
#   backupDirectory DIRECTORY BAK [OWNER]}         #
#   serviceWrapper  {stop|start|restart} SERVICE   #
# Must be run as root                              #
####################################################

function printTaskMsg {
	MSG="$1"
	DETAIL="$2"
	SPACER_SMALL="                      "
	SPACER_BIG="                                                      "
	echo "* $MSG${SPACER_SMALL:${#MSG}}$DETAIL${SPACER_BIG:${#DETAIL}}"
}

function backupPostgreDB {
	FN_NAME='backupPostgresDB'
	DB="$1"
	DB_OWNER="$2"
	SQL_BACKUP_TMP_DIR="$BACKUP_TMP_DIR/pgsql"
	SQL_FILE="$SQL_BACKUP_TMP_DIR/$DB.sql"

	printTaskMsg "Postgres DB" "$DB"

	if [ -z "$DB" ]; then
		echo "Usage: $FN_NAME DATABASE OWNER"
		return 1
	fi

	case "$ACTION" in
		dump)
			if [ -f "$SQL_FILE" ]; then
				echo "$SQL_FILE already exists"
				return 1
			fi

			mkdir -p "$SQL_BACKUP_TMP_DIR" &&
			chown root:postgres "$SQL_BACKUP_TMP_DIR" &&
			chmod 770 "$SQL_BACKUP_TMP_DIR" &&
			indent 2 su postgres -c "pg_dump '$DB' > '$SQL_FILE'"
		;;
		restore)
			if [ -z "$DB_OWNER" ]; then
				echo "Usage: $FN_NAME restore DATABASE FILE OWNER"
				return 1
			fi

			su postgres -c 'psql -l' | grep -P "^\s*$DB[^\w]" > /dev/null
			DB_GREP_STATUS=$?
			if [ $DB_GREP_STATUS -eq 0 ]; then
				echo '  * Drop'
				indent 2 su postgres -c "dropdb '$DB'"
			fi &&
			echo '  * Create' &&
			indent 2 su postgres -c "createdb '$DB' -O '$DB_OWNER'" &&
			echo "  * Run $DB.sql" &&
			indent 2 su postgres -c "psql --set ON_ERROR_STOP= -1 -f '$SQL_FILE' '$DB'" > /dev/null
		;;
	esac
}

function backupFile {
	FN_NAME='backupFile'
	FILE="$1"
	FILE_BAK="$BACKUP_TMP_DIR/$2"
	OWNER="$3"

	if [ -z "$OWNER" ]; then
		OWNER='root'
	fi

	printTaskMsg 'File' "$FILE"

	if [ -z "$FILE" ] || [ -z "$FILE_BAK" ]; then
		echo "Usage: $FN_NAME FILE BAK [OWNER]"
		return 1
	fi

	case "$ACTION" in
		dump)
			if [ -f "$FILE_BAK" ]; then
				echo "$FILE_BAK already exists"
				return 1
			fi

			mkdir -p $(dirname "$FILE_BAK") &&
			cp "$FILE" "$FILE_BAK"
		;;
		restore)
			if [ -z "$OWNER" ]; then
				echo "Usage: $FN_NAME FILE BAK [OWNER]"
				return 1
			fi
		
			rm -f "$FILE" &&
			cp "$FILE_BAK" "$FILE" &&
			chown -R "$OWNER" "$FILE"
		;;
	esac
}

function backupDirectory {
	FN_NAME='backupDirectory'
	DIRECTORY="$1"
	DIRECTORY_BAK="$BACKUP_TMP_DIR/$2"
	OWNER="$3"

	printTaskMsg 'Directory' "$DIRECTORY"

	if [ -z "$OWNER" ]; then
		OWNER='root'
	fi

	if [ -z "$DIRECTORY" ] || [ -z "$DIRECTORY_BAK" ]; then
		echo "Usage: $FN_NAME DIRECTORY BAK [OWNER]"
		return 1
	fi

	case "$ACTION" in
		dump)
			if [ -d "$DIRECTORY_BAK" ]; then
				echo "$DIRECTORY_BAK already exists"
				return 1
			fi

			mkdir -p $(dirname "$DIRECTORY_BAK") &&
			cp -r "$DIRECTORY" "$DIRECTORY_BAK"
			CP_STATUS=$?

			if [ $CP_STATUS -ne 0 ]; then
				return 1
			fi

			while [ "$3" != '-i' ] && [ "$3" != '' ]; do
				shift
			done
			if [ "$3" == '-i' ]; then
				printf '  * Ignore sub directories:'
				while [ "$4" != '' ]; do
					printf " $4"
					rm -rf "$DIRECTORY_BAK/$4"
					RM_STATUS=$?

					if [ $RM_STATUS -ne 0 ]; then
						return 1
					fi

					shift
				done
				echo ''
			fi
		;;
		restore)
			if [ -z "$OWNER" ]; then
				echo "Usage: $FN_NAME DIRECTORY BAK [OWNER]"
				return 1
			fi
		
			rm -rf "$DIRECTORY" &&
			cp -r "$DIRECTORY_BAK" "$DIRECTORY" &&
			chown -R "$OWNER" "$DIRECTORY"
		;;
	esac
}

function serviceWrapper {
	FN_NAME='serviceWrapper'

	if [ -z "$1" ]; then
		echo "Usage: $FN_NAME {stop|start|restart} SERVICE" 2>&1
		return 1
	fi

	case "$2" in
		stop)
			echo "* Stop $1"
			service "$1" stop &> /dev/null
		;;
		start|restart)
			echo "echo '* Restart $1'; service '$1' restart &> /dev/null" >> "$FINISH_LISTENER_FILE"
		;;
		*)
			echo "Usage: $FN_NAME {stop|start|restart} SERVICE" 2>&1
			return 1
		;;
	esac
}
