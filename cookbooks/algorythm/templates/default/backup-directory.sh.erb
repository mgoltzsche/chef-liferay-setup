#!/bin/bash
################################################################################################
# Usage: backup-directory.sh {dump DIRECTORY BAK|restore DIRECTORY BAK [OWNER[, PERMISSIONS]]} #
# Must be run as root                                                                          #
################################################################################################

if [ $(id -u) != '0' ]; then
	echo 'You need root privileges to run this script' 2>&1
	exit 1
fi

SCRIPT_NAME="$0"
ACTION="$1"
DIRECTORY="$2"
DIRECTORY_BAK="$3"
OWNER="$4"
PERMISSIONS="$5"

if [ -z "$OWNER" ]; then
	OWNER='root'
fi

if [ -z "$PERMISSIONS" ]; then
	PERMISSIONS='700'
fi

case "$ACTION" in
	dump|restore)
	;;
	*)
		echo "Usage: $SCRIPT_NAME {dump DIRECTORY BAK|restore DIRECTORY BAK [OWNER[, PERMISSIONS]]}"
		exit 1
	;;
esac

if [ -z "$DIRECTORY" ] || [ -z "$DIRECTORY_BAK" ]; then
	echo "Usage: $SCRIPT_NAME {dump DIRECTORY BAK|restore DIRECTORY BAK [OWNER[, PERMISSIONS]]}"
	exit 1
fi


echo "* $ACTION directory $DIRECTORY"

case "$ACTION" in
	dump)
		mkdir -p $(dirname "$DIRECTORY_BAK") &&
		cp -r "$DIRECTORY" "$DIRECTORY_BAK"
	;;
	restore)
		if [ -z "$OWNER" ]; then
			echo "Usage: $SCRIPT_NAME restore DIRECTORY BAK [OWNER[, PERMISSIONS]]"
			exit 1
		fi
		
		rm -rf "$DIRECTORY" &&
		cp -r "$DIRECTORY_BAK" "$DIRECTORY" &&
		chown -R "$OWNER:$OWNER" "$DIRECTORY" &&
		chmod -R $PERMISSIONS "$DIRECTORY"
	;;
esac
